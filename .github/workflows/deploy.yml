name: Deploy Nutrilud-BackEnd- to EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Verificar el código y descargar dependencias
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, bcmath, curl, xml, zip

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer
          composer --version

      # Paso 2: Configurar la clave SSH para conectarse al servidor
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      # Paso 3: Desplegar el proyecto en EC2
      - name: Deploy Laravel Project to EC2
        run: |
          echo "Conectando a la instancia EC2..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Variables de configuración
            PROJECT_DIR="/var/www/${{ secrets.PROJECT_PATH }}"

            # Actualizar el sistema e instalar dependencias necesarias
            sudo apt-get update
            sudo apt-get install -y git apache2 php8.2 php8.2-cli php8.2-common php8.2-mbstring php8.2-xml php8.2-bcmath php8.2-curl php8.2-zip unzip curl

            # Instalar Composer si no está instalado
            if ! command -v composer &> /dev/null; then
              curl -sS https://getcomposer.org/installer | php
              sudo mv composer.phar /usr/local/bin/composer
            fi

            # Verificar la instalación de Composer
            composer --version

            # Crear el directorio del proyecto si no existe
            sudo mkdir -p $PROJECT_DIR
            sudo chown -R ubuntu:ubuntu $PROJECT_DIR
            sudo chmod -R 775 $PROJECT_DIR

            # Detener Apache para evitar conflictos
            sudo systemctl stop apache2

            # Navegar al directorio del proyecto
            cd $PROJECT_DIR

            # Clonar el repositorio si no existe
            if [ ! -d ".git" ]; then
              git clone https://github.com/AbrahamCoco/Nutrilud-BackEnd-.git .
            fi

            # Actualizar el repositorio con los últimos cambios
            git pull origin master

            # Instalar dependencias de Composer
            composer install --no-dev --optimize-autoloader

            # Configurar .env y generar la clave de aplicación y agrega los datos de la base de datos
            cp .env.example .env
            php artisan key:generate
            sudo tee .env > /dev/null << ENV_CONF
            APP_NAME=Nutrilud
            APP_ENV=production
            APP_KEY=base64:$(php artisan key:generate --show)
            APP_DEBUG=false
            APP_URL=http://secrets.EC2_HOST

            DB_CONNECTION=mysql
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ENV_CONF

            # Optimizar configuración, rutas y vistas
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Configurar Apache
            sudo tee /etc/apache2/sites-available/${{ secrets.PROJECT_PATH }}.conf > /dev/null << APACHE_CONF
            <VirtualHost *:80>
                ServerName ${{ secrets.EC2_HOST }}
                DocumentRoot $PROJECT_DIR/public

                <Directory $PROJECT_DIR/public>
                    AllowOverride All
                    Require all granted
                </Directory>

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined
              </VirtualHost>
            APACHE_CONF

            # Activar el sitio y reiniciar Apache
            sudo a2ensite ${{ secrets.PROJECT_PATH }}.conf
            sudo a2enmod rewrite
            sudo systemctl restart apache2
          EOF

      # Paso 4: Confirmar despliegue
      - name: Notify Deployment
        run: echo "Deployment to EC2 instance completed successfully."
